-------------------------------------------------------

boOX

(C) Pavel Surynek, 2018 - 2023
pavel@surynek.net

=======================================================

An experimental package for solving various problems
related to artificial intelligence.

-------------------------------------------------------



-- Update 02/2023 -------------------------------------

A novel compilation scheme NRF-SAT (non-refined SAT) has been
implemented on top of SMT-CBS. NRF-SAT does not encode the
at-most-one constraints to ensure that there is at most one
appearance of the specific agent, we call this path-consistency
constraints. While the conflict elimination constraints are
encoded in the lazy/CEGAR style in SMT-CBS, the path-consistency
constraints are not encoded at all in NRF-SAT. The efect of
such non-refined abstraction in treated in the post-processing
step where instead of paths for individual agents we obtain
directed acyclic graphs from which the proper paths need to
be extracted.

The NRF-SAT algorithm can be invoked in the MAPF, TSWAP, TROT,
and TPERM solvers via parameter:

--algorithm=nrfsat

Please note that the standard MAPF as understood in most
papers is TROT within this package, so for the standard MAPF
solving please run:

./rota_solver_main

-------------------------------------------------------

Please enjoy your CEGAR-based MAPF solving...
Pavel Surynek, 02/2023

-------------------- **** -----------------------------



-- Update 05/2020 -------------------------------------

Since the above README the boOX package underwent a
major update. The most significant is the addition of a
solver for the continuous variant of multi-agent
path finding (MAPF^R, sometimes also called MAPF with
continuous time). The current version of the package
(2-019) has the following command line tool for MAPF^R:

mapfR_solver_boOX - an optimal makespan/SOC MAPF^R solver

The MAPF^R solver is based on the combination of SMT and
CBS (in the smart way). Samples for MAPF^R are available
in the samples/R directory.

-------------------------------------------------------

Please enjoy your CONTINUOUS problem solving...
Pavel Surynek, 05/2020

-------------------- **** -----------------------------



-------------------------------------------------------

The original README follows (still mostly valid):

-------------------------------------------------------

The current release of the package (version 0-104) includes
implementations of optimal solvers for various item
relocation problems. Solvers built upon conflict-based
search (CBS) and solvers based on satisfiability modulo
theories (SMT) are implemented.

The CBS and SMT solver has been originally developed for a
multi-agent path finding problem (MAPF). But we gradually
added modifications so the package now includes solvers
for:

  - multi-agent path finding (MAPF)
  - token swapping (TSWAP)
  - token rotation (TROT)
  - token permutation (TPERM)

Please see my papers for details of individual problems.


Compilation
-----------

./config-release
make optimized


Problem Solving
---------------

The presented package consists of several command line tools:

mapf_solver_boOX - an optimal MAPF solver
swap_solver_boOX - an optimal TSWAP solver
rota_solver_boOX - an optimal TROT solver
perm_solver_boOX - an optimal TPERM solver

All above programs can be found in /src/main directory. Each
program has a command line option --algorithm=<alg> by which
the user can switch between solving by CBS (--algorithm=cbs)
and solving by SMT (--algorithm=smtcbs).

Item relocation instances can be generated by following
programs located in the same directory:

gridgen_boOX   - instances on 4-regular grids
randgen_boOX   - instances on random graphs
cliquegen_boOX - instances on clique graphs
pathgen_boOX   - instances on path graphs
stargen_boOX   - instances on star graphs

Simple command line help is provided by each tool
when invoked with the --help option.

The following example shows how to run the solver
for the token swapping problem:

./swap_solver_boOX --output-file=solution.txt --input-file=clique_07_t07.tok --algorithm=smtcbs

-------------------------------------------------------

Please enjoy your problem solving...
Pavel Surynek, 09/2018

-------------------- **** -----------------------------

